{"version":3,"sources":["Game/config.js","Game/Buttons.js","Game/GameControls/InfectionLevel.js","Game/GameControls/index.js","Game/City.js","Game/DeckAndDiscard.js","Game/EpidemicModal.js","Game/View.js","Game/index.js","SiteNav.js","serviceWorker.js","index.js"],"names":["INFECTION_AMOUNTS","CITY_COLOR","CITY_NAMES_BY_COLOR","SEASON_1_CITIES","Object","entries","map","color","name","frequency","reduce","cities","citiesForColor","PrimaryButton","styled","button","TextButton","a","InfectionStage","div","ActiveInfectionStage","Container","Title","InfectionLevel","level","openEpidemicModal","infectionAmount","index","key","onClick","RightText","LastSaveDate","GameControls","resetGame","infectionLevel","lastSaveDate","React","useState","dateFormat","setDateFormat","useEffect","Intl","DateTimeFormat","timeStyle","dateStyle","isSaved","format","CSS_COLOR","CityInfo","CityStats","Probability","span","City","city","probabilities","onCityClick","bind","probability","CardGroup","CardGroupTitle","DiscardPile","CityCards","deck","discardPile","getProbabilities","playCityCard","values","deckSection","sectionIndex","isVisible","ModalMask","ModalBody","ModalTitle","SearchInput","input","EpidemicModal","close","triggerEpidemic","search","setSearch","bottomDeckSection","length","filteredCities","filter","indexOf","hasNoResults","closeAndReset","triggerEpidemicAndClose","value","onChange","event","target","placeholder","View","getProbabilitiesForDeckSectionAndFrequency","isShowingEpidemicModal","setIsShowingEpidemicModal","DeckAndDiscard","Game","probabilityCache","setProbabilityCache","setDeck","setDiscardPile","setInfectionLevel","setLastSaveDate","rawSaveData","localStorage","getItem","saveData","JSON","parse","date","saveGame","Date","now","setItem","stringify","moveCityToDiscardFromDeckSection","cardIndex","splice","console","warn","getSizeOfSection","deckSectionIndex","section","numCards","cityIndex","probabilityCacheHash","cardsBeforeSection","cardsPicked","cardsInSection","push","probabilityToNotChoose","chosenInSet","Math","min","decimalPlaceAdjust","pow","round","generateProbabilities","hasAtLeastOnePrediction","accumulator","error","discardCopy","Logo","CreatedBy","SiteNav","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3759e66c.chunk.js","sourcesContent":["export const INFECTION_AMOUNTS = [2, 2, 2, 3, 3, 4, 4]\nexport const MAX_DECIMAL_PLACES = 2\nexport const NUM_PREDICTIONS = 3\nexport const STORAGE_KEY = 'PLT - Save Data'\n\nexport const CITY_COLOR = {\n\tRED: 'red',\n\tBLUE: 'blue',\n\tBLACK: 'black',\n\tYELLOW: 'yellow',\n}\n\nexport const CITY_NAMES_BY_COLOR = {\n\t[CITY_COLOR.BLUE]: [\n\t\t'San Francisco',\n\t\t'Chicago',\n\t\t'Montreal',\n\t\t'New York',\n\t\t'Atlanta',\n\t\t'Washington',\n\t\t'Madrid',\n\t\t'London',\n\t\t'Paris',\n\t\t'Essen',\n\t\t'Milan',\n\t\t'St. Petersburg',\n\t],\n\t[CITY_COLOR.YELLOW]: [\n\t\t'Los Angeles',\n\t\t'Mexico City',\n\t\t'Miami',\n\t\t'Bogota',\n\t\t'Lima',\n\t\t'Sao Paulo',\n\t\t'Buenos Aires',\n\t\t'Santiago',\n\t\t'Lagos',\n\t\t'Kinshasa',\n\t\t'Khartoum',\n\t\t'Johannesburg',\n\t],\n\t[CITY_COLOR.BLACK]: [\n\t\t'Algiers',\n\t\t'Cairo',\n\t\t'Baghdad',\n\t\t'Istanbul',\n\t\t'Moscow',\n\t\t'Tehran',\n\t\t'Delhi',\n\t\t'Kolkata',\n\t\t'Chennai',\n\t\t'Mumbai',\n\t\t'Karachi',\n\t\t'Riyadh',\n\t],\n\t[CITY_COLOR.RED]: [\n\t\t'Beijing',\n\t\t'Seoul',\n\t\t'Shanghai',\n\t\t'Hong Kong',\n\t\t'Tokyo',\n\t\t'Osaka',\n\t\t'Taipei',\n\t\t'Bangkok',\n\t\t'Ho Chi Minh City',\n\t\t'Jakarta',\n\t\t'Manila',\n\t\t'Sydney',\n\t],\n}\n\nexport const SEASON_1_CITIES = Object.entries(CITY_NAMES_BY_COLOR)\n\t.map(\n\t\t([color, cities]) => cities.map(\n\t\t\tname => ({\n\t\t\t\tname,\n\t\t\t\tcolor,\n\t\t\t\tfrequency: 1,\n\t\t\t})\n\t\t)\n\t)\n\t.reduce((cities, citiesForColor) => [...cities, ...citiesForColor], [])\n","import styled from 'styled-components'\n\nconst ACTIVE_COLOR = '#FACD01'\n\nexport const PrimaryButton = styled.button`\n\t&:before {\n\t\tcontent: '';\n\t\tdisplay: block;\n\t\twidth: calc(100% + 0.5em);\n\t\theight: 0;\n\t\tborder-top: 0.35em dashed black;\n\t\tposition: absolute;\n\t\ttransform: skew(45deg);\n\t\tleft: -0.25em;\n\t\ttop: 0;\n\t}\n\n\toutline: none;\n\tdisplay: block;\n\tcursor: pointer;\n\tposition: relative;\n\toverflow: hidden;\n\tborder-radius: 0.15em;\n\tbackground: ${ACTIVE_COLOR};\n\tborder: none;\n\tpadding: 0.75em 0.5em 0.45em;\n\tfont-weight: bold;\n\ttext-transform: uppercase;\n`\n\nexport const TextButton = styled.a`\n\tdisplay: inline-block;\n\tbackground: transparent;\n\tfont-weight: bold;\n\ttext-transform: uppercase;\n\tborder: none;\n\tcolor: white;\n\ttext-decoration: underline;\n\tcursor: pointer;\n\ttransition: color 0.2s;\n\n\t&:hover {\n\t\tcolor: ${ACTIVE_COLOR};\n\t}\n`\n","import React from 'react'\nimport { INFECTION_AMOUNTS } from '../config'\nimport styled from 'styled-components'\nimport { PrimaryButton } from '../Buttons'\n\nexport const COLOR_INFECTION = '#39AC6C'\n\nconst InfectionStage = styled.div`\n\twidth: 2em;\n\theight: 2em;\n\tborder-radius: 50%;\n\tbackground: ${COLOR_INFECTION}55;\n\tborder: 0.2em solid ${COLOR_INFECTION}AA;\n\ttext-align: center;\n\tline-height: 2em;\n\tfont-weight: bold;\n\tcolor: ${COLOR_INFECTION}AA;\n\tmargin-right: 0.35em;\n`\n\nconst ActiveInfectionStage = styled(InfectionStage)`\n\tbackground: ${COLOR_INFECTION};\n\tcolor: white;\n`\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\talign-items: center;\n`\n\nconst Title = styled.div`\n\tcolor: white;\n\tfont-weight: bold;\n\tfont-size: 1.25rem;\n\ttext-transform: uppercase;\n\tline-height: 1;\n\tmargin-right: 0.35em;\n`\n\nconst InfectionLevel = ({ level, openEpidemicModal }) => (\n\t<Container>\n\t\t<Title>Infection Level</Title>\n\t\t{\n\t\t\tINFECTION_AMOUNTS.map((infectionAmount, index) => level === index\n\t\t\t\t? <ActiveInfectionStage key={index}>{infectionAmount}</ActiveInfectionStage>\n\t\t\t\t: <InfectionStage key={index}>{infectionAmount}</InfectionStage>\n\t\t\t)\n\t\t}\n\t\t<PrimaryButton onClick={openEpidemicModal}>Trigger Epidemic</PrimaryButton>\n\t</Container>\n)\n\nexport default InfectionLevel","import React from 'react'\nimport styled from 'styled-components'\n\nimport InfectionLevel from './InfectionLevel'\nimport { TextButton } from '../Buttons'\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: space-between;\n\tpadding: 0.5em;\n`\n\nconst RightText = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-end;\n\tfont-size: .8em;\n`\n\nconst LastSaveDate = styled.div`\n\tmargin-top: 0.75em;\n\tfont-size: 0.9em;\n\tcolor: #FFFFFF77;\n`\n\nconst GameControls = ({\n\tresetGame,\n\tinfectionLevel,\n\topenEpidemicModal,\n\tlastSaveDate,\n}) => {\n\tconst [dateFormat, setDateFormat] = React.useState()\n\n\tReact.useEffect(() => {\n\t\tsetDateFormat(new Intl.DateTimeFormat('en', { timeStyle: 'medium', dateStyle: 'short' }))\n\t}, [])\n\n\tconst isSaved = dateFormat && lastSaveDate\n\n\treturn (\n\t\t<Container>\n\t\t\t<InfectionLevel level={infectionLevel} openEpidemicModal={openEpidemicModal} />\n\t\t\t<RightText>\n\t\t\t\t<TextButton onClick={resetGame}>Reset Game</TextButton>\n\t\t\t\t<LastSaveDate>\n\t\t\t\t\t{isSaved ? `Last saved: ${dateFormat.format(lastSaveDate)}` : 'Not saved yet'}\n\t\t\t\t</LastSaveDate>\n\t\t\t</RightText>\n\t\t</Container>\n\t)\n}\n\nexport default GameControls","import React from 'react'\nimport styled from 'styled-components'\n\nimport { CITY_COLOR } from './config'\n\nconst CSS_COLOR = {\n\t[CITY_COLOR.RED]: '#d20404',\n\t[CITY_COLOR.BLUE]: '#38359a',\n\t[CITY_COLOR.BLACK]: '#000000',\n\t[CITY_COLOR.YELLOW]: '#d2ba00',\n}\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: space-between;\n\tbackground: ${({ color }) => CSS_COLOR[color]}55;\n\tpadding: 0.75em 1em;\n\tcursor: pointer;\n\tcolor: white;\n\ttransition: background 0.2s;\n\n\t&:first-of-type {\n\t\tborder-top-left-radius: 0.25em;\n\t\tborder-top-right-radius: 0.25em;\n\t}\n\n\t&:last-of-type {\n\t\tborder-bottom-left-radius: 0.25em;\n\t\tborder-bottom-right-radius: 0.25em;\n\t}\n\n\t&:hover {\n\t\tbackground: ${({ color }) => CSS_COLOR[color]}99;\n\t}\n`\n\nconst CityInfo = styled.div`\n\ttext-transform: uppercase;\n`\n\nconst CityStats = styled.div`\n\n`\n\nconst Probability = styled.span`\n\tmargin-left: 1em;\n\tfont-size: 0.75em;\n\n\t&:nth-of-type(2) {\n\t\topacity: 0.7;\n\t}\n\n\t&:nth-of-type(3) {\n\t\topacity: 0.4;\n\t}\n`\n\nconst City = ({\n\tcity,\n\tprobabilities,\n\tonClick,\n}) => {\n\tconst onCityClick = onClick\n\t\t? onClick.bind(null, city)\n\t\t: null\n\n\treturn (\n\t\t<Container onClick={onCityClick} color={city.color}>\n\t\t\t<CityInfo>\n\t\t\t\t{city.name}\n\t\t\t\t<span>{city.frequency > 1 ? `(${city.frequency})` : ''}</span>\n\t\t\t</CityInfo>\n\t\t\t<CityStats>\n\t\t\t\t{probabilities && probabilities.map((probability, index) => (\n\t\t\t\t\t<Probability key={index}>{probability}%</Probability>\n\t\t\t\t))}\n\t\t\t</CityStats>\n\t\t</Container>\n\t)\n}\n\nexport default City","import React from 'react'\nimport styled from 'styled-components'\n\nimport City from './City'\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\tmargin-top: 1.5em;\n`\n\nconst CardGroup = styled.div`\n\twidth: 20em;\n\tpadding: 0 1em;\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nconst CardGroupTitle = styled.div`\n\tmargin-bottom: 0.55em;\n\tcolor: #FFFFFFAA;\n\ttext-transform: uppercase;\n`\n\nconst DiscardPile = styled(CardGroup)`\n\t&:before {\n\t\tcontent: '';\n\t\tdisplay: block;\n\t\theight: calc(100% + 0.5em);\n\t\twidth: 0;\n\t\tborder-right: 0.35em dashed #FFFFFF22;\n\t\tposition: absolute;\n\t\ttransform: skew(0, 45deg);\n\t\tright: -1.1em;\n\t\ttop: 0;\n\t}\n\n\tposition: relative;\n\tmargin-right: 2em;\n`\n\nconst CityCards = ({\n\tdeck,\n\tdiscardPile,\n\tgetProbabilities,\n\tplayCityCard,\n}) => {\n\treturn (\n\t\t<Container>\n\t\t\t<DiscardPile key=\"Discard Pile\">\n\t\t\t\t<CardGroupTitle>Discard</CardGroupTitle>\n\t\t\t\t{Object.values(discardPile).map(city => <City key={city.name} city={city} />)}\n\t\t\t</DiscardPile>\n\n\t\t\t{/* TODO: ADD INPUT SEARCH */}\n\t\t\t{deck.map((deckSection, sectionIndex) => (\n\t\t\t\t<CardGroup key={sectionIndex}>\n\t\t\t\t\t<CardGroupTitle>\n\t\t\t\t\t\t{sectionIndex === 0 ? 'Top deck section' : `Section ${sectionIndex + 1}`}\n\t\t\t\t\t</CardGroupTitle>\n\t\t\t\t\t{deckSection.map((city, index) => (\n\t\t\t\t\t\t<City\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\tcity={city}\n\t\t\t\t\t\t\tprobabilities={getProbabilities(sectionIndex, city.frequency)}\n\t\t\t\t\t\t\tonClick={playCityCard}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</CardGroup>\n\t\t\t))}\n\t\t</Container>\n\t)\n}\n\nexport default CityCards\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport City from './City'\n\nconst Container = styled.div`\n\tposition: fixed;\n\ttop: 0;\n\tleft: 0;\n\twidth: 100vw;\n\theight: 100vh;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tpadding-top: ${({ isVisible }) => isVisible ? '5vh' : '0'};\n\ttransition: opacity 0.5s, z-index 0.5s, padding-top 0.4s;\n\topacity: ${({ isVisible }) => isVisible ? '1' : '0'};\n\tz-index: ${({ isVisible }) => isVisible ? '100' : '-1'};\n`\n\nconst ModalMask = styled.div`\n\tbackground: #000000BB;\n\tposition: absolute;\n\tleft: 0;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\tz-index: -1;\n`\n\nconst ModalBody = styled.div`\n\tmax-width: 30em;\n\tmax-height: 90vh;\n\twidth: 100%;\n\tbackground: #394756;\n\tborder-radius: 0.2em;\n\tpadding: 1em;\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nconst ModalTitle = styled.div`\n\tfont-size: 1.5em;\n\ttext-transform: uppercase;\n\tcolor: white;\n\tmargin-bottom: 0.75em;\n`\n\nconst SearchInput = styled.input`\n\tfont-size: 1em;\n\tpadding: 0.25em 0.5em;\n\tbackground: #FFFFFFCC;\n\tborder: 0;\n\tborder-radius: 0.2em;\n\tmargin-bottom: 1em;\n\n\t&:focus {\n\t\toutline: none;\n\t}\n`\n\nconst EpidemicModal = ({ isVisible, close, deck, triggerEpidemic }) => {\n\tconst [search, setSearch] = React.useState('')\n\tconst bottomDeckSection = deck[deck.length - 1]\n\tconst filteredCities = search\n\t\t? bottomDeckSection.filter(city => city.name.indexOf(search) >= 0)\n\t\t: []\n\tconst hasNoResults = search && filteredCities.length === 0\n\n\tconst searchChange = event => {\n\t\tsetSearch(event.target.value)\n\t}\n\tconst closeAndReset = () => {\n\t\tsetSearch('')\n\t\tclose()\n\t}\n\tconst triggerEpidemicAndClose = city => {\n\t\ttriggerEpidemic(city)\n\t\tcloseAndReset()\n\t}\n\n\treturn (\n\t\t<Container isVisible={isVisible}>\n\t\t\t<ModalMask onClick={closeAndReset}/>\n\t\t\t<ModalBody>\n\t\t\t\t<ModalTitle>Epidemic!</ModalTitle>\n\t\t\t\t<SearchInput value={search} onChange={searchChange} placeholder=\"Search for a city\" />\n\t\t\t\t{hasNoResults\n\t\t\t\t\t? <span>No cities found</span>\n\t\t\t\t\t: filteredCities.map(city => (\n\t\t\t\t\t\t<City key={city.name} city={city} onClick={triggerEpidemicAndClose} />\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t</ModalBody>\n\t\t</Container>\n\t)\n}\n\nexport default EpidemicModal","import React from 'react'\nimport styled from 'styled-components'\n\nimport GameControls from './GameControls'\nimport DeckAndDiscard from './DeckAndDiscard'\nimport EpidemicModal from './EpidemicModal'\n\nconst Container = styled.div`\n\tbackground: #394756;\n\tpadding: 1em 1em 4em;\n`\n\nconst View = ({\n\tinfectionLevel,\n\tresetGame,\n\tdeck,\n\tdiscardPile,\n\tgetProbabilitiesForDeckSectionAndFrequency,\n\tplayCityCard,\n\ttriggerEpidemic,\n\tlastSaveDate,\n}) => {\n\tconst [isShowingEpidemicModal, setIsShowingEpidemicModal] = React.useState(false)\n\n\tconst openEpidemicModal = () => {\n\t\tsetIsShowingEpidemicModal(true)\n\t}\n\n\tconst closeEpidemicModal = () => {\n\t\tsetIsShowingEpidemicModal(false)\n\t}\n\n\treturn (\n\t\t<Container>\n\t\t\t<GameControls\n\t\t\t\tinfectionLevel={infectionLevel}\n\t\t\t\topenEpidemicModal={openEpidemicModal}\n\t\t\t\tresetGame={resetGame}\n\t\t\t\tlastSaveDate={lastSaveDate}\n\t\t\t/>\n\t\t\t<DeckAndDiscard\n\t\t\t\tdeck={deck}\n\t\t\t\tdiscardPile={discardPile}\n\t\t\t\topenEpidemicModal={openEpidemicModal}\n\t\t\t\tgetProbabilities={getProbabilitiesForDeckSectionAndFrequency}\n\t\t\t\tplayCityCard={playCityCard}\n\t\t\t/>\n\t\t\t<EpidemicModal\n\t\t\t\tdeck={deck}\n\t\t\t\tisVisible={isShowingEpidemicModal}\n\t\t\t\tclose={closeEpidemicModal}\n\t\t\t\ttriggerEpidemic={triggerEpidemic}\n\t\t\t/>\n\t\t</Container>\n\t)\n}\n\nexport default View","import React from 'react'\n\nimport View from './View'\nimport {\n\tINFECTION_AMOUNTS,\n\tNUM_PREDICTIONS,\n\tMAX_DECIMAL_PLACES,\n\tSEASON_1_CITIES,\n\tSTORAGE_KEY,\n} from './config'\n\nconst Game = () => {\n\tconst [probabilityCache, setProbabilityCache] = React.useState({})\n\tconst [deck, setDeck] = React.useState([SEASON_1_CITIES])\n\tconst [discardPile, setDiscardPile] = React.useState({})\n\tconst [infectionLevel, setInfectionLevel] = React.useState(0)\n\tconst [lastSaveDate, setLastSaveDate] = React.useState()\n\n\tconst infectionAmount = INFECTION_AMOUNTS[infectionLevel]\n\n\tReact.useEffect(() => {\n\t\tconst rawSaveData = localStorage.getItem(STORAGE_KEY)\n\n\t\tif (!rawSaveData) {\n\t\t\tresetGame()\n\t\t\treturn\n\t\t}\n\n\t\tconst saveData = JSON.parse(rawSaveData)\n\n\t\tsetDeck(saveData.deck)\n\t\tsetDiscardPile(saveData.discardPile)\n\t\tsetInfectionLevel(saveData.infectionLevel)\n\t\tsetLastSaveDate(saveData.date)\n\t\tsetProbabilityCache({})\n\t}, [])\n\n\tconst saveGame = () => {\n\t\tconst saveData = {\n\t\t\tdate: Date.now(),\n\t\t\tdeck,\n\t\t\tdiscardPile,\n\t\t\tinfectionLevel,\n\t\t}\n\n\t\tlocalStorage.setItem(STORAGE_KEY, JSON.stringify(saveData))\n\n\t\tsetLastSaveDate(saveData.date)\n\t}\n\n\tconst resetGame = () => {\n\t\tlocalStorage.setItem(STORAGE_KEY, \"\")\n\n\t\tsetDeck([SEASON_1_CITIES])\n\t\tsetDiscardPile({})\n\t\tsetInfectionLevel(0)\n\t\tsetProbabilityCache({})\n\t\tsetLastSaveDate(null)\n\t}\n\n\tconst moveCityToDiscardFromDeckSection = (sectionIndex, city) => {\n\t\tconst cardIndex = deck[sectionIndex].indexOf(city)\n\n\t\t// We only want to allow pulling off of specified section\n\t\tif (cardIndex === -1) {\n\t\t\tconsole.warn(`${city.name} not found in deck section ${sectionIndex}`)\n\t\t\treturn;\n\t\t}\n\n\t\t// Lower the amount of this card\n\t\tdeck[sectionIndex][cardIndex].frequency--\n\n\t\t// If it was the last one remove it\n\t\tif (deck[sectionIndex][cardIndex].frequency === 0) {\n\t\t\t\tdeck[sectionIndex].splice(cardIndex, 1);\n\t\t}\n\n\t\t// If the section is empty, delete it\n\t\tif (deck[sectionIndex].length === 0) {\n\t\t\t\tdeck.splice(0, 1);\n\t\t}\n\n\t\t// If this city is not in the discard already, add it\n\t\tif (!discardPile[city.name]) {\n\t\t\t\tdiscardPile[city.name] = {\n\t\t\t\t\t...city,\n\t\t\t\t\tfrequency: 0,\n\t\t\t\t}\n\t\t}\n\n\t\tdiscardPile[city.name].frequency++\n\n\t\tsetDiscardPile(discardPile)\n\t\tsetDeck(deck)\n\t}\n\n\tconst playCityCard = city => {\n\t\tmoveCityToDiscardFromDeckSection(0, city);\n\t\tsetProbabilityCache({})\n\n\t\tsaveGame()\n\t}\n\n\tconst triggerEpidemic = city => {\n\t\tif (!city) {\n\t\t\tconsole.error('city required to trigger epidemic')\n\t\t}\n\n\t\tmoveCityToDiscardFromDeckSection(deck.length - 1, city);\n\n\t\tconst discardCopy = Object.values(discardPile);\n\t\tsetDeck([\n\t\t\tdiscardCopy,\n\t\t\t...deck,\n\t\t])\n\n\t\tsetInfectionLevel(infectionLevel + 1)\n\t\tsetDiscardPile({})\n\t\tsetProbabilityCache({})\n\n\t\tsaveGame()\n\t}\n\n\tconst getSizeOfSection = deckSectionIndex => {\n\t\tlet section = deck[deckSectionIndex];\n\t\tlet numCards = 0;\n\n\t\tfor (let cityIndex = 0; cityIndex < section.length; cityIndex++) {\n\t\t\tlet city = section[cityIndex]\n\t\t\tnumCards += city.frequency\n\t\t}\n\n\t\treturn numCards\n\t}\n\n\tconst generateProbabilities = (deckSection, frequency) => {\n\t\tlet cardsBeforeSection = 0\n\t\tlet probabilities = []\n\t\tlet cardsPicked = 0\n\t\tlet cardsInSection = getSizeOfSection(deckSection)\n\n\t\tfor (let section = 0; section < deckSection; section++) {\n\t\t\t\tcardsBeforeSection += getSizeOfSection(section)\n\t\t}\n\n\t\twhile (probabilities.length < NUM_PREDICTIONS && cardsInSection > 0) {\n\t\t\t// If the next set is not even in this section, add 0\n\t\t\tif (cardsPicked + infectionAmount <= cardsBeforeSection) {\n\t\t\t\tprobabilities.push(0);\n\t\t\t\tcardsPicked += infectionAmount;\n\t\t\t}\n\t\t\t// Else we have the chance to pull this card\n\t\t\telse {\n\t\t\t\t// The city has to get picked\n\t\t\t\tif (cardsInSection < infectionAmount) {\n\t\t\t\t\t\tprobabilities.push(100);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlet probabilityToNotChoose = 1;\n\t\t\t\t\t/*\n\t\t\t\t\t  n - f       n - 1 - f       n - 2 - f\n\t\t\t\t\t -------  *  -----------  *  ----------- * ...\n\t\t\t\t\t    n           n - 1           n - 2\n\t\t\t\t\t*/\n\t\t\t\t\tfor (let chosenInSet = 0; chosenInSet < infectionAmount; chosenInSet++) {\n\t\t\t\t\t\t\tprobabilityToNotChoose *= (cardsInSection - chosenInSet - frequency) / (cardsInSection - chosenInSet)\n\t\t\t\t\t}\n\n\t\t\t\t\tlet probability = Math.min(1.0 - probabilityToNotChoose, 1.0)\n\t\t\t\t\tlet decimalPlaceAdjust = Math.pow(10, MAX_DECIMAL_PLACES)\n\t\t\t\t\tprobabilities.push(Math.round(probability * 100 * decimalPlaceAdjust) / decimalPlaceAdjust)\n\t\t\t\t}\n\n\t\t\t\tif (probabilities[probabilities.length - 1] === 100) {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\tcardsInSection -= infectionAmount\n\t\t\t}\n\t\t}\n\n\t\treturn probabilities\n\t}\n\n\tconst getProbabilitiesForDeckSectionAndFrequency = (deckSection, frequency) => {\n\t\tconst probabilityCacheHash = `${deckSection}-${frequency}`\n\n\t\tif (!probabilityCache[probabilityCacheHash]) {\n\t\t\tlet probabilities = generateProbabilities(deckSection, frequency)\n\t\t\tconst hasAtLeastOnePrediction = probabilities.reduce(\n\t\t\t\t(accumulator, probability) => accumulator || probability !== 0,\n\t\t\t\tfalse\n\t\t\t)\n\n\t\t\t// If all the predictions are 0, just return an empty array\n\t\t\tprobabilities = hasAtLeastOnePrediction ? probabilities : []\n\n\t\t\t// Disabled for now\n\t\t\t// setProbabilityCache({\n\t\t\t// \t...probabilityCache,\n\t\t\t// \t[probabilityCacheHash]: probabilities,\n\t\t\t// })\n\n\t\t\treturn probabilities\n\t\t}\n\n\t\treturn probabilityCache[probabilityCacheHash];\n\t}\n\n\treturn (\n\t\t<View\n\t\t\tinfectionLevel={infectionLevel}\n\t\t\tresetGame={resetGame}\n\t\t\tdeck={deck}\n\t\t\tdiscardPile={discardPile}\n\t\t\tlastSaveDate={lastSaveDate}\n\t\t\tgetProbabilitiesForDeckSectionAndFrequency={getProbabilitiesForDeckSectionAndFrequency}\n\t\t\tplayCityCard={playCityCard}\n\t\t\ttriggerEpidemic={triggerEpidemic}\n\t\t/>\n\t)\n}\n\nexport default Game","import React from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\tbackground: #20222f;\n\tpadding: 1em 1em;\n\tjustify-content: space-between;\n\talign-items: center;\n\tline-height: 1;\n`\n\nconst Logo = styled.div`\n\tcolor: #FACD01;\n\ttext-transform: uppercase;\n\tfont-style: italic;\n\tfont-weight: bold;\n\tfont-size: 2em;\n`\n\nconst CreatedBy = styled.span`\n\tcolor: #FFFFFF77;\n\tfont-size: 0.85em;\n\n\ta {\n\t\tcolor: #FFFFFFBB;\n\t\ttransition: color 0.2s;\n\n\t\t&:hover {\n\t\t\tcolor: #FFFFFFFF;\n\t\t}\n\t}\n`\n\nconst SiteNav = () => (\n\t<Container>\n\t\t<Logo>Pandemic Legacy Tracker</Logo>\n\t\t<CreatedBy>\n\t\t\tCreated by <a href=\"//paularmer.me\" rel=\"noopener noreferrer\" target=\"_blank\">Paul Armer</a>\n\t\t</CreatedBy>\n\t</Container>\n)\n\nexport default SiteNav","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport SiteNav from './SiteNav';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SiteNav />\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}